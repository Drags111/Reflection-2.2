(*
Interface
=========

Wrapper for interfaces.

*)

type
  TInterface = record
    Obj: Integer;
  end;

function Interface_Create(Obj: Integer): TInterface;
begin
  Result.Obj := Obj;
end;

procedure Interface_Free(IFace: TInterface);
begin
  SmartFreeObject(IFace.Obj);
end;

(*
Interface_GetParentID
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetParentID(IFace: TInterface): Integer;

Gets the ID of the parent of the specified interface. Used for any
part of the interface information that relies on the parent.

.. note::

  by Pyroryan and Drags111

*)
function Interface_GetParentID(IFace: TInterface): Integer;
var
  ParentID, MainID, InterfaceNC, Nodes, Tail, Node, ID, Next : Integer;
  NodesSize, Index : Integer;
begin
  ParentID := SmartGetFieldInt(IFace.Obj, hook_interface_ParentID);
  if (ParentID <> -1) then
  begin
    Result := ParentID;
    Exit;
  end;
  MainID := Trunc(SmartGetFieldInt(IFace.Obj, hook_interface_ID) div 65536);
  InterfaceNC := SmartGetFieldObject(0, hook_static_InterfaceNC);
  if (InterfaceNC = 0) then
  begin
    SmartFreeObject(InterfaceNC);
    Exit;
  end;
  Nodes := SmartGetFieldObject(InterfaceNC, hook_nodecache_Nodes);
  NodesSize := SmartGetFieldArraySize(Nodes, '', 1);
  try
    for Index := 0 to (NodesSize - 1) do
    begin
      Tail := SmartGetFieldArrayObject(Nodes, '', Index);
      Node := SmartGetFieldObject(Tail, hook_node_Next);
      while (not (SmartIsEqual(Tail, Node))) do
      begin
        ID := SmartGetFieldInt(Node, hook_interfacenode_ID);
        if (MainID = ID) then
        begin
          Result := SmartGetFieldLongL(Node, hook_node_ID);
          Exit;
        end;
        Next := SmartGetFieldObject(Node, hook_node_Next);
        SmartFreeObject(Node);
        Node := Next;
      end;
      SmartFreeObject(Tail);
      SmartFreeObject(Node);
      SmartFreeObject(Next);
    end;
  finally
    SmartFreeObject(Next);
    SmartFreeObject(Node);
    SmartFreeObject(Nodes);
    SmartFreeObject(Tail);
    SmartFreeObject(InterfaceNC);
  end;
end;

(*
Interface_GetAbsolutePos
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetAbsolutePos(IFace: TInterface): TPoint;

Gets the absolute position of the interface. Uses parent to account for
scrollbar and the parent's location.

.. note::

  by Drags111

*)
function Interface_GetAbsolutePos(IFace: TInterface): TPoint;
var
  X, Y, ParentID, BoundIndex: Integer;
  Bounds: Integer;
  Parent: TInterface;
  ParentPoint: TPoint;
begin
  X := SmartGetFieldInt(IFace.Obj, hook_interface_X);
  Y := SmartGetFieldInt(IFace.Obj, hook_interface_Y);
  ParentID := Interface_GetParentID(IFace);

  if(ParentID > 0)then
  begin
    try
      Parent := Interface_Create(SmartGetFieldArray2DObject(0, hook_static_Interfaces, ParentID shr 16, ParentID and $FFFF));

      ParentPoint := Interface_GetAbsolutePos(Parent);

      X := X + ParentPoint.x;
      Y := Y + ParentPoint.y;

      if(SmartGetFieldInt(Parent.Obj, hook_interface_HorizontalScrollBarSize) <> 0)then
        X := X - SmartGetFieldInt(Parent.Obj, hook_interface_HorizontalScrollBarPosition);
      if(SmartGetFieldInt(Parent.Obj, hook_interface_VerticalScrollBarSize) <> 0)then
        Y := Y - SmartGetFieldInt(Parent.Obj, hook_interface_VerticalScrollBarPosition);
    finally
      Interface_Free(Parent);
    end;
  end else
  begin
    BoundIndex := SmartGetFieldInt(IFace.Obj, hook_interface_BoundsArrayIndex);
    Bounds := SmartGetFieldArrayObject(0, hook_static_InterfaceBoundsArray, BoundIndex);
    if((Bounds > 0) and (SmartGetFieldArrayBoolean(0, hook_static_InterfaceDismissBounds, BoundIndex)))then
    begin
      Result := Point(SmartGetFieldInt(Bounds, 'x'),
                      SmartGetFieldInt(Bounds, 'y'));
      SmartFreeObject(Bounds);
      Exit;
    end;
    SmartFreeObject(Bounds);
  end;
  Result := Point(X, Y);
end;

(*
Interface_GetActions
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetActions(IFace: TInterface): TStringArray;

Gets the actions of the IFace.

.. note::

  by Drags111

*)
function Interface_GetActions(IFace: TInterface): TStringArray;
var
  Len, C, i: Integer;
  Action: String;
begin
  Len := SmartGetFieldArraySize(IFace.Obj, Hook_Interface_Actions, 1);
  if (Len <= 0)then
    Exit;

  C := 0;
  SetLength(Result, Len);

  for i := 0 to Len-1 do
  begin
    Action := SmartGetFieldArrayString(IFace.Obj, hook_interface_Actions, i);
    if(Action <> '')then
    begin
      Result[C] := Action;
      Inc(C);
    end;
  end;
  SetLength(Result, C);
end;

(*
Interface_IsHidden
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_IsHidden(IFace: TInterface): Boolean;

Gets Interface.IsHidden. Uses parent information

.. note::

  by mormonman

*)
function Interface_IsHidden(IFace: TInterface): Boolean;
var
  ParentID: Integer;
  Parent: TInterface;
begin
  ParentID := Interface_GetParentID(IFace);
  if(ParentID > 0)then
  begin
    try
      Parent := Interface_Create(SmartGetFieldArray2DObject(0, hook_static_Interfaces, ParentID shr 16, ParentID and $FFFF));
      Result := SmartGetFieldBoolean(Parent.Obj, hook_interface_IsHidden);
    finally
      Interface_Free(Parent);
    end;
  end else Result := SmartGetFieldBoolean(IFace.Obj, hook_interface_IsHidden);
end;

(*
Interface_IsInventory
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_IsInventory(IFace: TInterface): Boolean;

Gets Interface.IsInventory.

.. note::

  by mormonman

*)
function Interface_IsInventory(IFace: TInterface): Boolean;
begin
  Result := SmartGetFieldBoolean(IFace.Obj, hook_interface_IsInventory);
end;

(*
Interface_GetID
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetID(IFace: TInterface): Integer;

Gets Interface.ID

.. note::

  by mormonman

*)
function Interface_GetID(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_ID);
end;

(*
Interface_GetComponentIndex
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetComponentIndex(IFace: TInterface): Integer;

Gets Interface.ComponentIndex

.. note::

  by mormonman

*)
function Interface_GetComponentIndex(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_ComponentIndex);
end;

(*
Interface_GetComponentID
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetComponentID(IFace: TInterface): Integer;

Gets Interface.ComponentID

.. note::

  by mormonman

*)
function Interface_GetComponentID(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_ComponentID);
end;

(*
Interface_GetStackSize
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetStackSize(IFace: TInterface): Integer;

Gets Interface.ComponentStackSize

.. note::

  by mormonman

*)
function Interface_GetStackSize(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_ComponentStackSize);
end;

(*
Interface_GetTextureID
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetTextureID(IFace: TInterface): Integer;

Gets Interface.TextureID

.. note::

  by mormonman

*)
function Interface_GetTextureID(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_TextureID);
end;

(*
Interface_GetModelID
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetModelID(IFace: TInterface): Integer;

Gets Interface.ModelID

.. note::

  by mormonman

*)
function Interface_GetModelID(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_ModelID);
end;

(*
Interface_GetModelZoom
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetModelZoom(IFace: TInterface): Integer;

Gets Interface.ModelZoom

.. note::

  by mormonman

*)
function Interface_GetModelZoom(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_ModelZoom);
end;

(*
Interface_GetRelativeX
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetRelativeX(IFace: TInterface): Integer;

Gets Interface.X; It doesn't account for parent offsets.

.. note::

  by mormonman

*)
function Interface_GetRelativeX(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_X);
end;

(*
Interface_GetRelativeY
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetRelativeY(IFace: TInterface): Integer;

Gets Interface.Y; It doesn't account for parent offsets.

.. note::

  by mormonman

*)
function Interface_GetRelativeY(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_Y);
end;

(*
Interface_GetWidth
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetWidth(IFace: TInterface): Integer;

Gets Interface.Width

.. note::

  by mormonman

*)
function Interface_GetWidth(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_Width);
end;

(*
Interface_GetHeight
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetHeight(IFace: TInterface): Integer;

Gets Interface.Height

.. note::

  by mormonman

*)
function Interface_GetHeight(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_Height);
end;

(*
Interface_GetText
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetText(IFace: TInterface): String;

Gets Interface.Text

.. note::

  by mormonman

*)
function Interface_GetText(IFace: TInterface): String;
begin
  Result := SmartGetFieldString(IFace.Obj, hook_interface_Text);
end;

(*
Interface_GetTextColor
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetTextColor(IFace: TInterface): Integer;

Gets Interface.TextColor

.. note::

  by mormonman

*)
function Interface_GetTextColor(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_TextColor);
end;

(*
Interface_GetName
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetName(IFace: TInterface): String;

Gets Interface.Name

.. note::

  by mormonman

*)
function Interface_GetName(IFace: TInterface): String;
begin
  Result := SmartGetFieldString(IFace.Obj, hook_interface_ComponentName);
end;

(*
Interface_GetVScrollSize
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetVScrollSize(IFace: TInterface): Integer;

Gets Interface.VerticalScrollBarSize; Interface must be a vertical
scrollbar

.. note::

  by mormonman

*)
function Interface_GetVScrollSize(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_VerticalScrollBarSize);
end;

(*
Interface_GetVScrollPosition
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetVScrollPosition(IFace: TInterface): Integer;

Gets Interface.VerticalScrollBarPosition; Interface must be a vertical
scrollbar

.. note::

  by mormonman

*)
function Interface_GetVScrollPosition(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_VerticalScrollBarPosition);
end;

(*
function Interface_GetVThumbSize(IFace: TInterface): Integer;
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetVThumbSize(IFace: TInterface): Integer;

Gets Interface.VerticalScrollBarThumbSize; Interface must be a vertical
scrollbar

.. note::

  by mormonman

*)
function Interface_GetVThumbSize(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_VerticalScrollBarThumbSize);
end;

(*
Interface_GetHScrollSize
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetHScrollSize(IFace: TInterface): Integer;

Gets Interface.HorizontalScrollBarSize; Interface must be a horizontal
scrollbar

.. note::

  by mormonman

*)
function Interface_GetHScrollSize(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_HorizontalScrollBarSize);
end;

(*
Interface_GetHScrollPosition
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetHScrollPosition(IFace: TInterface): Integer;

Gets Interface.HorizontalScrollBarPosition; Interface must be a horizontal
scrollbar

.. note::

  by mormonman

*)
function Interface_GetHScrollPosition(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_HorizontalScrollBarPosition);
end;

(*
Interface_GetHThumbSize
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetHThumbSize(IFace: TInterface): Integer;

Gets Interface.HorizontalScrollBarThumbSize; Interface must be a horizontal
scrollbar

.. note::

  by mormonman

*)
function Interface_GetHThumbSize(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_HorizontalScrollBarThumbSize);
end;

(*
Interface_GetBoundsArrayIndex
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetBoundsArrayIndex(IFace: TInterface): Integer;

Gets Interface.BoundArrayIndex. Used for getting absolute position

.. note::

  by mormonman

*)
function Interface_GetBoundsArrayIndex(IFace: TInterface): Integer;
begin
  Result := SmartGetFieldInt(IFace.Obj, hook_interface_BoundsArrayIndex);
end;

(*
Interface_GetX
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetX(IFace: TInterface): Integer;

Gets Interface's onscreen x position

.. note::

  by mormonman

*)
function Interface_GetX(IFace: TInterface): Integer;
begin
  Result := Interface_GetAbsolutePos(IFace).x;
end;

(*
Interface_GetY
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetY(IFace: TInterface): Integer;

Gets Interface's onscreen y position

.. note::

  by mormonman

*)
function Interface_GetY(IFace: TInterface): Integer;
begin
  Result := Interface_GetAbsolutePos(IFace).y;
end;

(*
Interface_GetBounds
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetBounds(IFace: TInterface): TBox;

Gets Interface's onscreen bounds

.. note::

  by mormonman

*)
function Interface_GetBounds(IFace: TInterface): TBox;
var
  P: TPoint;
begin
  P.x := Interface_GetX(IFace) + Interface_GetWidth(IFace);
  P.y := Interface_Gety(IFace) + Interface_GetHeight(IFace);
  Result := PointToBox(Interface_GetAbsolutePos(IFace), P);
end;

(*
Interface_GetComponents
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Interface_GetComponents(IFace: TInterface): TIntegerArray;

Gets Interface's components

.. note::

  by mormonman

*)
function Interface_GetComponents(IFace: TInterface): TIntegerArray;
var
  C, Child, IL, I: Integer;
begin
  try
    SetLength(Result, C);
    if SmartIsNull(IFace.Obj) then
      Exit;
    IL := SmartGetFieldArraySize(IFace.Obj, hook_interface_Children, 1);
    if (IL < 1) then Exit;
    SetLength(Result, IL);

    for I := 0 to IL-1 do
    begin
      Child := SmartGetFieldArrayObject(IFace.Obj, hook_interface_Children, I);
      if not (SmartIsNull(Child)) then
      begin
        Result[C] :=I;
        Inc(C);
      end;
      SmartFreeObject(Child);
    end;
    SetLength(Result, C);
  finally
    SmartFreeObject(Child);
  end;
end;
