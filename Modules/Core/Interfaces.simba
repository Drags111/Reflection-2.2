(*
Interfaces
==========

File containing interface routines.

*)

const
  {Interface Constants}
  SEARCH_TEXT = 0;
  SEARCH_NAME = 1;

  SCROLLBAR_UP     = 4;
  SCROLLBAR_DOWN   = 5;

(*
R_ValidInterface
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_ValidInterface(Index: Integer): Boolean;

Returns true if the interface is valid.

.. note::

  by Drags111

*)
function R_ValidInterface(Index: Integer): Boolean;
begin
  Result := SmartGetFieldArrayBoolean(0, hook_static_ValidInterfaces, Index);
end;

(*
R_GetValidInterfaces
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetValidInterfaces: TIntegerArray;

Returns an array of all the valid interfaces.

.. note::

  by Drags111

*)
function R_GetValidInterfaces: TIntegerArray;
var
  IL, I, C: integer;
begin
  IL := SmartGetFieldArraySize(0, hook_static_Interfaces, 1);
  SetLength(Result, IL);

  for I := 0 to IL-1 do
  begin
    if(R_ValidInterface(I))then
    begin
      Result[C] :=I;
      Inc(C);
    end;
  end;

  SetLength(Result, C);
end;

(*
R_GetInterfaceParent
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterfaceParent(Child: TInterface): TInterface;

Returns the parent of the Child.

.. note::

  by mormonman

*)
function R_GetInterfaceParent(Child: TInterface): TInterface;
var
  ParentID: Integer;
begin
  ParentID := Interface_GetParentID(Child);
  if ParentID > 0 then
    Result := Interface_Create(SmartGetFieldArray2DObject(0, hook_static_Interfaces, ParentID shr 16, ParentID and $FFFF));
end;

(*
R_GetTopParent
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetTopParent(Child: TInterface): TInterface;

Returns the top parent of the Child.

.. note::

  by mormonman

*)
function R_GetTopParent(Child: TInterface): TInterface;
var
  ParentID: Integer;
begin
  ParentID := Interface_GetParentID(Child);
  if (ParentID > 0) then
  begin
    Result := R_GetInterfaceParent(Child);
    ParentID := Interface_GetParentID(Result);
    if (ParentID > 0) then
    begin
      Result := R_GetTopParent(Result);
    end;
  end else Result := Child;
end;

(*
R_GetInterface
~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterface(Index: Integer): TInterface;

Retrieve's the interface's object and stores in a TInterface var.

.. note::

  by Drags111

*)
function R_GetInterface(Index: Integer): TInterface;
var
  IFace: Integer;
  FChild: TInterface;
begin
  try
    IFace := SmartGetFieldArray2DObject(0, hook_static_Interfaces, Index, 0);
    if SmartIsNull(IFace)then Exit;
    FChild := Interface_Create(IFace);
    Result := R_GetInterfaceParent(FChild);
  finally
    Interface_Free(FChild);
  end;
end;

(*
R_GetInterfaceChild
~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterfaceChild(ParentI, ChildI: Integer): TInterface;

Retrieve's the interface's child object and stores in a TInterface var.

.. note::

  by Drags111

*)
function R_GetInterfaceChild(ParentI, ChildI: Integer): TInterface;
var
  Child: Integer;
begin
  if not R_ValidInterface(ParentI)then
    Exit;

  Child := SmartGetFieldArray2DObject(0, hook_static_Interfaces, ParentI, ChildI);
  if SmartIsNull(Child)then
  begin
    SmartFreeObject(Child);
    Exit;
  end;

  Result := Interface_Create(Child);
end;

(*
R_GetInterfaceComponent
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterfaceComponent(ParentI, ChildI, ComponentI: Integer): TInterface;

Gets all Interface -> Child -> Component information and stores in a TInterface.

.. note::

  by Drags111

*)
function R_GetInterfaceComponent(ParentI, ChildI, ComponentI: Integer): TInterface;
var
  Child, Component: Integer;
begin
  if not R_ValidInterface(ParentI)then
    Exit;

  Child := SmartGetFieldArray2DObject(0, hook_static_Interfaces, ParentI, ChildI);
  if SmartIsNull(Child)then
    Exit;

  Component := SmartGetFieldArrayObject(Child, hook_interface_Children, ComponentI);
  SmartFreeObject(Child);
  if SmartIsNull(Component)then
  begin
    Exit;
  end;

  Result := Interface_Create(Component);
end;

(*
R_GetValidChildren
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetValidChildren(IFace: TInterface): TIntegerArray;

Returns all the children in the parent interface.

.. note::

  by pyroryan

*)
function R_GetValidChildren(ParentI: Integer): TIntegerArray;
var
  Child, C: Integer;
begin
  SetLength(Result, 0);
  try
    C := 0;
    Child := SmartGetFieldArray2DObject(0, hook_static_Interfaces, ParentI, C);
    while not (SmartIsNull(Child)) do
    begin
      SetArrayLength (Result, C+1);
      Result[C] := C;
      Inc(C);
      SmartFreeObject(Child);
      Child := SmartGetFieldArray2DObject(0, hook_static_Interfaces, ParentI, C);
    end;
    SetLength(Result, C);
  finally
    SmartFreeObject(Child);
  end;
end;

(*
R_GetValidComponents
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetValidComponents(ParentI, ChildI: Integer): TIntegerArray;

Returns all the components in the parent-->child interface.

.. note::

  by mormonman

*)
function R_GetValidComponents(ParentI, ChildI: Integer): TIntegerArray;
var
  Child: TInterface;
begin
  SetLength(Result, 0);
  try
    Child := R_GetInterfaceChild(ParentI, ChildI);
    if SmartIsNull(Child.Obj) then
      Exit;

    Result := Interface_GetComponents(Child);
  finally
    Interface_Free(Child);
  end;
end;

(*
R_FindInterface
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_FindInterface(var IFace: TInterface; Text: String; SearchType: Integer): Boolean;

Returns the interface that contains the text.
  @Text - EXACT text to search for(case-sensitive)
  @SearchConst - SEARCH_NAME = Search Interface.GetName
                 SEARCH_TEXT = Search Interface.GetText

.. note::

  by mormonman

*)
function R_FindInterface(var IFace: TInterface; Text: String; SearchType: Integer): Boolean;
var
  AccessorFunc: function(I: TInterface): String;
  InterfaceIDs, ChildrenIDs, CompIDs: TIntegerArray;
  CurrChild, CurrComponent: TInterface;
  I, II, III: Integer;
  InterfaceStr: String;
begin
  Result := False;
  Text := Trim(Lowercase(Text));
  case SearchType of
    0: AccessorFunc := @Interface_GetText;
    1: AccessorFunc := @Interface_GetName;
  end;

  InterfaceIDs := R_GetValidInterfaces;
  for I := 0 to High(InterfaceIDs)do
  begin

    //Iterate through the interface's children.
    ChildrenIDs := R_GetValidChildren(InterfaceIDs[I]);
    for II := 0 to High(ChildrenIDs)do
    begin

      //Iterate through components if they exist.
      CompIDs := R_GetValidComponents(InterfaceIDs[I], ChildrenIDs[II]);
      if(Length(CompIDs) > 0)then
      begin
        for III := 0 to High(CompIDs)do
        begin
          CurrComponent := R_GetInterfaceComponent(InterfaceIDs[I], ChildrenIDs[II], CompIDs[III]);
          InterfaceStr := Trim(Lowercase(AccessorFunc(CurrComponent)));
          if(Pos(Text, InterfaceStr) > 0)then
          begin
            IFace := Interface_Create(CurrComponent.Obj);
            Result := True;
            Exit;
          end;
          Interface_Free(CurrComponent);
        end;
      end;

      //Check the current child.
      CurrChild := R_GetInterfaceChild(InterfaceIDs[I], ChildrenIDs[II]);
      InterfaceStr := Trim(Lowercase(AccessorFunc(CurrChild)));
      if(Pos(Text, InterfaceStr) > 0)then
      begin
        IFace := Interface_Create(CurrChild.Obj);
        Result := True;
        Exit;
      end;
      Interface_Free(CurrChild);
    end;

  end;
end;

(*
R_ClickInterface
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure R_ClickInterface(Child: TInterface; ClickType: Integer);

Moves the mouse to and (depending on the ClickType) will click the interface
child/component. The ClickType follows the same rule as MouseBox:
  1/mouse_Left  : Left Click
  2/mouse_Right : Right Click
  3/mouse_Move  : No Click

.. note::

  by Drags111

*)
procedure R_ClickInterface(Child: TInterface; ClickType: Integer);
var
  Box: TBox;
begin
  Box := Interface_GetBounds(Child);
  R_MouseBox(Box.X1, Box.Y1, Box.X2, Box.Y2, ClickType);
end;

(*
R_ClickInterfaceRange
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure R_ClickInterfaceRange(Child: TInterface; ClickType, Rangex, Rangey: Integer);

Moves the mouse to and (depending on the ClickType) will click the interface
child/component in a Rangex by Rangey box of the middle point. The ClickType follows
the same rule as MouseBox:
  1/mouse_Left  : Left Click
  2/mouse_Right : Right Click
  3/mouse_Move  : No Click

.. note::

  by mormonman

*)
procedure R_ClickInterfaceRange(Child: TInterface; ClickType, Rangex, Rangey: Integer);
var
  P: TPoint;
begin
  P := R_MiddleBox(Interface_GetBounds(Child));
  R_MouseBox(P.x - (Rangex/2), P.y - (Rangey/2), P.x + (Rangex/2), P.y + (Rangey/2), ClickType);
end;

(*
R_ScrollTo
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_ScrollTo(Target, UpA, DnA: TInterfaceChild) : Boolean;

Scrolls to the Target using the Up and Down arrows specified by ScrollBar.

.. note::

  by mormonman

*)
function R_ScrollTo(Target, ScrollBar: TInterface) : Boolean;
var
  T, I, x, y: Integer;
  Bounds, InBox: TBox;
  P1, P2: TPoint;
  UpA, DnA, Box: TInterface;
  Dir: String;
begin
  if (Interface_IsHidden(Target)) then Exit;
  try
    UpA := Interface_Create(SmartGetFieldArrayObject(ScrollBar.Obj, hook_Interface_Children, SCROLLBAR_UP));
    DnA := Interface_Create(SmartGetFieldArrayObject(ScrollBar.Obj, hook_Interface_Children, SCROLLBAR_DOWN));

    Bounds := Interface_GetBounds(Target);
    Box := R_GetInterfaceParent(ScrollBar);
    InBox := Interface_GetBounds(Box);
    P1 := Point(Bounds.X1, Bounds.Y1);
    P2 := Point(Bounds.X2, Bounds.Y2);
    Result := PointInBox(P1, InBox)
      and PointInBox(P2, InBox)
      and not Interface_IsHidden(Target);
    if Result then
      Exit;

    for I := 1 to 2 do
    begin
      if(P1.y < InBox.Y1)then
        Dir := 'up'
      else if(P2.y > InBox.Y2)then
        Dir := 'down';
      if(dir = '')then
      begin
        R_Debug('Error getting destination direction.', 'R_ScrollTo');
        Exit;
      end;// else R_Debug('Dir: ' +Dir, 'R_ScrollTo');

      case dir of
        'up':   R_ClickInterface(UpA, 3);
        'down': R_ClickInterface(DnA, 3);
      end;
      GetMousePos(x, y);
      HoldMouse(x, y, 1);
      T := GetSystemTime + 10000;

      while not(PointInBox(P1, InBox) and PointInBox(P2, InBox)) do
      begin
        if(GetSystemTime > T)then
          break;
        wait(100+Random(50));
        Bounds := Interface_GetBounds(Target);
        P1 := Point(Bounds.X1, Bounds.Y1);
        P2 := Point(Bounds.X2, Bounds.Y2);
      end;

      ReleaseMouse(x, y, 1);
      Wait(500+Random(100));
      Result := PointInBox(P1, InBox) and PointInBox(P2, InBox);
      if Result then
        Continue;
    end;
  finally
    Interface_Free(UpA);
    Interface_Free(DnA);
    Interface_Free(Box);
  end;
end;
