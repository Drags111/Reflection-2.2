(*
Minimap
==========

Contains the routines for the interfaces around the Minimap.

*)

(*
R_GetCameraAngle
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetCameraAngle: Integer;

Returns the Camera Angle. 0 = lowest, 100 = highest.

.. note::

  by Drags111

*)
function R_GetCameraAngle: Integer;
var
  D: Extended;
begin
  D := (SmartGetFieldInt(0, hook_static_CameraPitch) / 1024.0);
  Result := Round((D - 1) * 50);
end;

(*
R_SetCameraAngle
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_SetCameraAngle(Angle: Integer): Boolean;

Sets the Camera Angle. 0 = lowest, 100 = highest.

.. note::

  by Drags111

*)
function R_SetCameraAngle(Angle: Integer): Boolean;
var
  C, T: Integer;
begin
  Result := (Angle = R_GetCameraAngle);
  if Result then Exit;

  if(Angle < R_GetCameraAngle)then
    C := VK_DOWN
  else
    C := VK_UP;

  KeyDown(C);
  T := GetSystemTime + 5000;
  while (GetSystemTime < T) do
  begin
    if(C = VK_DOWN) and (Angle >= R_GetCameraAngle)then
      Break;
    if(C = VK_UP) and (Angle <= R_GetCameraAngle)then
      Break;
    wait(10+Random(10));
  end;
  KeyUp(C);
end;

(*
R_GetMMLevel
~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetMMLevel(Which: string): Integer;

Returns the current value at the designated minimap level.

.. note::

  by lordsaturn, Drags111

*)
function R_GetMMLevel(Which: string): Integer;
var
  Child: TInterface;
begin
  case LowerCase(Which) of
    'hitpoints', 'hp', 'lp', 'lifepoints': Child := R_GetInterfaceChild(INTERFACE_HITPOINTS, 8);
    'prayer', 'pp'   : Child := R_GetInterfaceChild(INTERFACE_PRAYER, 4);
    'run', 'energy'  : Child := R_GetInterfaceChild(INTERFACE_RUN, 5);
    'sum', 'summ', 'summoning': Child := R_GetInterfaceChild(INTERFACE_SUMMONING, 5);
    else R_Debug('Invaild string.', 'R_GetMMLevels');
  end;
  Result := StrToIntDef(Interface_GetText(Child), -1);
  Interface_Free(Child);
end;

(*
R_ClickNorth
~~~~~~~~~~~~

.. code-block:: pascal

    procedure R_ClickNorth;

Clicks the compass icon next to the minimap to face the compass north.
Will set angle to highest if SetAngle = True.

.. note::

  by Drags111

*)
procedure R_ClickNorth(SetAngle: Boolean);
var
  Compass: TInterface;
begin
  if not R_ValidInterface(INTERFACE_GAMETAB)then
    Exit;
  Compass := R_GetInterfaceChild(INTERFACE_GAMETAB, INTERFACE_GAMETAB_FACENORTH);
  R_ClickInterface(Compass, 1);
  Interface_Free(Compass);
  if SetAngle then
    R_SetCameraAngle(100);
end;

(*
R_IsRunning
~~~~~~~~~~~

.. code-block:: pascal

    function R_IsRunning: boolean;

Returns true if you are running.

.. note::

  by Drags111

*)
function R_IsRunning: boolean;
begin
  Result := R_GetSetting(SETTING_RUN) = 1;
end;

(*
R_SetRun
~~~~~~~~

.. code-block:: pascal

    procedure R_SetRun(Run: Boolean);

Sets the run to the condition specified.

.. note::

  by Drags111

*)
procedure R_SetRun(Run: Boolean);
var
  Button: TInterface;
  T: Integer;
begin
  if not R_ValidInterface(INTERFACE_RUN)then
    Exit;
  if(Run = R_IsRunning)then
    Exit;

  Button := R_GetInterfaceChild(INTERFACE_RUN, 1);
  R_ClickInterface(Button, 1);
  Interface_Free(Button);

  T := GetSystemTime + 1000;
  while (GetSystemTime < T) do
  begin
    Wait(25+Random(50));
    if(Run = R_IsRunning)then
      Break;
  end;

end;

(*
R_IsResting
~~~~~~~~~~~

.. code-block:: pascal

    function R_IsResting: boolean;

Returns true if your player is performing the resting animation.

.. note::

  by Drags111

*)
{function R_IsResting: boolean;
var
  Animations: TIntegerArray;
begin
  SetLength(Animations, 5);
  Animations := [12108, 2033, 2716, 11786, 5713];
  Result := InIntArray(Animations, R_GetAnimation);
end;

(*
R_Rest
~~~~~~

.. code-block:: pascal

    function R_Rest(MaxEnergy: integer): boolean;

Uses the rest ability until the desired energy is reached.

.. note::

  by Drags111

*)
function R_Rest(MaxEnergy: integer): boolean;
var
  T, MT, Energy: integer;
  RunIcon: TInterfaceChild;
begin
  Result := True;
  MarkTime(MT);
  Energy := R_GetMMLevels('Run');

  if(Energy >= MaxEnergy)then
    Exit;

  Result := R_IsResting;
  while(not Result)do
  begin
    if not LoggedIn or (TimeFromMark(MT) > 9000)then
      Exit;
    RunIcon := R_GetInterfaceChild(INTERFACE_RUN, 1);
    R_ClickInterface(RunIcon, 2);
    Wait(25+Random(50));
    Result := R_ChooseOption('Rest');
    if(Result)then
    begin
      MarkTime(T);
      while((not R_IsResting) and (TimeFromMark(T) < 3000))do
        wait(100+Random(100));
      Result := (R_IsResting);
    end;
  end;

  Energy := R_GetMMLevels('run');
  while(Energy < MaxEnergy)do
  begin
    case Random(50) of
      0..5: SleepAndMoveMouse(Random(1000));
      else wait(100+Random(400));
    end;
    Energy := R_GetMMLevels('run');
  end;
end; }

(*
R_WorldMapOpen
~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_WorldMapOpen : Boolean;

Returns true if the World Map is open.

.. note::

  by Drags111

*)
function R_WorldMapOpen : Boolean;
var
  Map: TInterface;
begin
  Result := R_ValidInterface(INTERFACE_WORLDMAP);
  if not Result then
    Exit;
  Map := R_GetInterfaceChild(INTERFACE_WORLDMAP, 0);
  Result := (Interface_GetWidth(Map) <> 0);
  Interface_Free(Map);
end;

(*
R_CloseWorldMap
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_CloseWorldMap : Boolean;

Closes the World Map. Returns true if it is successful.

.. note::

  by Drags111

*)
function R_CloseWorldMap : Boolean;
var
  T: Integer;
  Button: TInterface;
begin
  Result := False;
  if not R_WorldMapOpen then
  begin
    Result := True;
    Exit;
  end;

  Button := R_GetInterfaceChild(INTERFACE_WORLDMAP, INTERFACE_WORLDMAP_CLOSE);
  R_ClickInterface(Button, 1);
  Interface_Free(Button);

  T := GetSystemTime + 5000;
  while (GetSystemTime < T) do
  begin
    wait(50+Random(50));
    if (not R_WorldMapOpen) then
      Break;
  end;
  Result := (not R_WorldMapOpen);
end;
